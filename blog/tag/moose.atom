<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://preaction.github.io/blog/tag/moose/</id>
    <title>preaction</title>
    <updated>2015-07-30T00:28:58Z</updated>
    <link href="http://preaction.github.io/blog/tag/moose.atom" rel="self" />
    <link href="http://preaction.github.io/blog/tag/moose/" rel="alternate" />
    <generator version="0.053">Statocles</generator>
    <entry>
        <id>http://preaction.github.io/blog/2012/10/22/using-moosex-types-to-inflate-config-values.html</id>
        <title>Using MooseX::Types to Inflate Config Values</title>
        <author><name>preaction</name></author>
        <link href="http://preaction.github.io/blog/2012/10/22/using-moosex-types-to-inflate-config-values.html" rel="alternate" />
        <content type="html"><![CDATA[
            <p>For a large application, configuration files become a necessity. They help
flexible code be used in multiple instances across multiple modules. But they
are, for the most part, only data structures, which can be a problem if the
configured object is expecting another configured object.</p>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2012/10/using-moosextypes-to-inflate-config-values.html">
                        Continue reading <em>Using MooseX::Types to Inflate Config Values</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2012/10/22/using-moosex-types-to-inflate-config-values.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/moose/">moose</a>
            </p>
        ]]></content>
        <updated>2012-10-22T00:00:00Z</updated>
        <category term="moose" />
    </entry>
    <entry>
        <id>http://preaction.github.io/blog/2012/10/07/run-time-class-composition-with-moose.html</id>
        <title>Run-time Class Composition With Moose</title>
        <author><name>preaction</name></author>
        <link href="http://preaction.github.io/blog/2012/10/07/run-time-class-composition-with-moose.html" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Moose is great! At its very basic, it simplifies the boilerplate required to
create Perl objects immensely, providing attributes with type constraints,
method modifiers for semantic enhancement, and role-based class composition for
better code re-use.</p>

<p>Moose is built on top of Class::MOP. MOP stands for Meta-Object Protocol. A
meta-object is an object that describes an object. So, each attribute and
method in your class has a corresponding entry in the meta-object describing
it. The meta-object is where you can find out what type constraints are on an
attribute, or what methods a class has available.</p>

<p>Since the meta-object is a Plain Old Perl Object, we can call methods on it at
runtime. Using those meta-object methods to add an attribute would modify our
object, adding that attribute to the object. Using Class::MOP, we can compose
classes at runtime!</p>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2012/10/run-time-class-composition-with-moose.html">
                        Continue reading <em>Run-time Class Composition With Moose</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.github.io/blog/2012/10/07/run-time-class-composition-with-moose.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/moose/">moose</a>
            </p>
        ]]></content>
        <updated>2012-10-07T00:00:00Z</updated>
        <category term="moose" />
    </entry>
</feed>

