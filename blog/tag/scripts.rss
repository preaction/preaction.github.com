<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>preaction</title>
        <link>http://preaction.github.io/blog/tag/scripts/</link>
        <atom:link href="http://preaction.github.io/blog/tag/scripts.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of preaction</description>
        <generator>Statocles 0.054</generator>
        <item>
            <title>perlsloc - Count Perl Source Lines with Perl::Tidy</title>
            <link>http://preaction.github.io/blog/2014/06/29/perlsloc-count-perl-source-lines-with-perl-tidy.html</link>
            <guid>http://preaction.github.io/blog/2014/06/29/perlsloc-count-perl-source-lines-with-perl-tidy.html</guid>
            <description><![CDATA[
                <p>While spending some time putting together my own <a href="https://github.com/preaction/dot-files/blob/master/perltidyrc">perltidyrc
file</a>, I became
intimately familiar with the <a href="https://metacpan.org/pod/distribution/Perl-Tidy/bin/perltidy">Perl::Tidy
documentation</a>.</p>

<p>One day, I decided to find out exactly how much code I was maintaining. Since
perltidy can strip comments and POD, and also normalize the source code to make
a fair measurement, it&#39;s a perfect tool for counting Source Lines of Code
(SLOC).</p>

<p>Here&#39;s a small shell script using <code>ack</code>, <code>perltidy</code>, <code>xargs</code>, and <code>wc</code> to count
the source lines of code in any number of directories.</p>

<pre><code>ack -f --perl $@ | xargs -L 1 perltidy --noprofile --delete-pod --mbl=0 --standard-output | wc -l
</code></pre>

<p><code>ack -f</code> lists the files that would be searched, and <code>--perl</code> searches Perl
files, so we get ack&#39;s heuristics for finding Perl files. <code>xargs -L 1</code> invokes
the following command for every 1 line of input. The <code>perltidy</code> command strips
the pod and tightens up the whitespace and writes the result to stdout, which
<code>wc -l</code> will then count, line by line.</p>

<p>So, as an example, the current <a href="http://metacpan.org/release/Statocles">Statocles</a> release
has 50% more test lines than source lines:</p>

<pre><code>» perlsloc lib bin
    1034
» perlsloc t
    1633
</code></pre>

                    <ul>
                        <li><a href="http://blogs.perl.org/users/preaction/2014/06/perlsloc---count-perl-source-lines-with-perltidy.html">
                            Continue reading <em>perlsloc - Count Perl Source Lines with Perl::Tidy</em> on blogs.perl.org...
                        </a></li>
                        <li><a href="http://preaction.github.io/blog/2014/06/29/perlsloc-count-perl-source-lines-with-perl-tidy.html#section-2">
                            Continue reading on preaction
                        </a></li>
                    </ul>
                <p>Tags:
                    <a href="/blog/tag/scripts/">scripts</a>
                </p>
            ]]></description>
            <pubDate>
                Sun, 29 Jun 2014 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

